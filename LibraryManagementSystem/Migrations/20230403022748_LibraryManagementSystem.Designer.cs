// <auto-generated />
using System;
using LibraryManagementSystem.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementSystem.Migrations
{
    [DbContext(typeof(LibraryManagementSystemDbContext))]
    [Migration("20230403022748_LibraryManagementSystem")]
    partial class LibraryManagementSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+books", b =>
                {
                    b.Property<int>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_id"));

                    b.Property<string>("author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_update")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type_book")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("book_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+booksevaluation", b =>
                {
                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("evaluation_id")
                        .HasColumnType("int");

                    b.HasKey("book_id", "evaluation_id");

                    b.HasIndex("evaluation_id");

                    b.ToTable("booksevaluations");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+booksusers", b =>
                {
                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("users_id")
                        .HasColumnType("int");

                    b.Property<int?>("usersuser_id")
                        .HasColumnType("int");

                    b.HasKey("book_id", "users_id");

                    b.HasIndex("usersuser_id");

                    b.ToTable("booksusers");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+borrowings", b =>
                {
                    b.Property<int>("borrowing_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("borrowing_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<string>("borrowings_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_update")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("due_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("borrowing_id");

                    b.HasIndex("book_id");

                    b.HasIndex("user_id");

                    b.ToTable("borrowings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+document", b =>
                {
                    b.Property<int>("document_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("document_id"));

                    b.Property<int>("parent_id")
                        .HasColumnType("int");

                    b.Property<int>("parent_type")
                        .HasColumnType("int");

                    b.Property<int>("type_url")
                        .HasColumnType("int");

                    b.Property<int>("url")
                        .HasColumnType("int");

                    b.HasKey("document_id");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+evaluation", b =>
                {
                    b.Property<int>("evaluation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("evaluation_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("borrowing_id")
                        .HasColumnType("int");

                    b.Property<string>("comment_rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("time_rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("evaluation_id");

                    b.ToTable("evaluations");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+evaluationborrowings", b =>
                {
                    b.Property<int>("evaluation_id")
                        .HasColumnType("int");

                    b.Property<int>("borrowings_id")
                        .HasColumnType("int");

                    b.Property<int?>("borrowingsborrowing_id")
                        .HasColumnType("int");

                    b.HasKey("evaluation_id", "borrowings_id");

                    b.HasIndex("borrowingsborrowing_id");

                    b.ToTable("evaluationborrowings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+evaluationusers", b =>
                {
                    b.Property<int>("evaluation_id")
                        .HasColumnType("int");

                    b.Property<int>("users_id")
                        .HasColumnType("int");

                    b.Property<int?>("usersuser_id")
                        .HasColumnType("int");

                    b.HasKey("evaluation_id", "users_id");

                    b.HasIndex("usersuser_id");

                    b.ToTable("evaluationusers");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+returnings", b =>
                {
                    b.Property<int>("returning_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("returning_id"));

                    b.Property<int>("borrowing_id")
                        .HasColumnType("int");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_update")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lost_book")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("returning_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("usersuser_id")
                        .HasColumnType("int");

                    b.HasKey("returning_id");

                    b.HasIndex("borrowing_id");

                    b.HasIndex("usersuser_id");

                    b.ToTable("returnings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+users", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("access_level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_of_birth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_update")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+booksevaluation", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+books", "books")
                        .WithMany("booksevaluation")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+evaluation", "evaluation")
                        .WithMany("booksevaluations")
                        .HasForeignKey("evaluation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("books");

                    b.Navigation("evaluation");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+booksusers", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+books", "books")
                        .WithMany("booksusers")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+users", "users")
                        .WithMany()
                        .HasForeignKey("usersuser_id");

                    b.Navigation("books");

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+borrowings", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+books", "books")
                        .WithMany("borrowings")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+users", "users")
                        .WithMany("borrowings")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("books");

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+evaluationborrowings", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+borrowings", "borrowings")
                        .WithMany()
                        .HasForeignKey("borrowingsborrowing_id");

                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+evaluation", "evaluation")
                        .WithMany()
                        .HasForeignKey("evaluation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("borrowings");

                    b.Navigation("evaluation");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+evaluationusers", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+evaluation", "evaluation")
                        .WithMany("evaluationusers")
                        .HasForeignKey("evaluation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+users", "users")
                        .WithMany("evaluationusers")
                        .HasForeignKey("usersuser_id");

                    b.Navigation("evaluation");

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+returnings", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+borrowings", "borrowings")
                        .WithMany("returnings")
                        .HasForeignKey("borrowing_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.models.LibraryManagementSystem+users", "users")
                        .WithMany("returnings")
                        .HasForeignKey("usersuser_id");

                    b.Navigation("borrowings");

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+books", b =>
                {
                    b.Navigation("booksevaluation");

                    b.Navigation("booksusers");

                    b.Navigation("borrowings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+borrowings", b =>
                {
                    b.Navigation("returnings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+evaluation", b =>
                {
                    b.Navigation("booksevaluations");

                    b.Navigation("evaluationusers");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.LibraryManagementSystem+users", b =>
                {
                    b.Navigation("borrowings");

                    b.Navigation("evaluationusers");

                    b.Navigation("returnings");
                });
#pragma warning restore 612, 618
        }
    }
}
