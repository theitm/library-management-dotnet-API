// <auto-generated />
using System;
using LibraryManagementSystem.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementSystem.Migrations
{
    [DbContext(typeof(LibraryManagementSystemDbContext))]
    [Migration("20230407031312_Users")]
    partial class Users
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Books", b =>
                {
                    b.Property<int>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_id"));

                    b.Property<string>("author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_udate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type_book")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("book_id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.BooksEvaluation", b =>
                {
                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("evaluation_id")
                        .HasColumnType("int");

                    b.HasKey("book_id", "evaluation_id");

                    b.HasIndex("evaluation_id");

                    b.ToTable("BooksEvaluations");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.BooksUsers", b =>
                {
                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("users_id")
                        .HasColumnType("int");

                    b.Property<int?>("Usersuser_id")
                        .HasColumnType("int");

                    b.HasKey("book_id", "users_id");

                    b.HasIndex("Usersuser_id");

                    b.ToTable("BooksUsers");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Borrowings", b =>
                {
                    b.Property<int>("borrowing_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("borrowing_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<string>("borrowings_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_udate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("due_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("borrowing_id");

                    b.HasIndex("book_id");

                    b.HasIndex("user_id");

                    b.ToTable("Borrowings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Document", b =>
                {
                    b.Property<int>("document_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("document_id"));

                    b.Property<int>("parent_id")
                        .HasColumnType("int");

                    b.Property<int>("parent_type")
                        .HasColumnType("int");

                    b.Property<int>("type_url")
                        .HasColumnType("int");

                    b.Property<int>("url")
                        .HasColumnType("int");

                    b.HasKey("document_id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Evaluation", b =>
                {
                    b.Property<int>("evaluation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("evaluation_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("borrowing_id")
                        .HasColumnType("int");

                    b.Property<string>("comment_rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("time_rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("evaluation_id");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.EvaluationBorrowings", b =>
                {
                    b.Property<int>("evaluation_id")
                        .HasColumnType("int");

                    b.Property<int>("borrowings_id")
                        .HasColumnType("int");

                    b.Property<int?>("Borrowingsborrowing_id")
                        .HasColumnType("int");

                    b.HasKey("evaluation_id", "borrowings_id");

                    b.HasIndex("Borrowingsborrowing_id");

                    b.ToTable("EvaluationBorrowings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.EvaluationUsers", b =>
                {
                    b.Property<int>("evaluation_id")
                        .HasColumnType("int");

                    b.Property<int>("users_id")
                        .HasColumnType("int");

                    b.Property<int?>("Usersuser_id")
                        .HasColumnType("int");

                    b.HasKey("evaluation_id", "users_id");

                    b.HasIndex("Usersuser_id");

                    b.ToTable("EvaluationUsers");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Returnings", b =>
                {
                    b.Property<int>("returning_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("returning_id"));

                    b.Property<int?>("Usersuser_id")
                        .HasColumnType("int");

                    b.Property<int>("borrowing_id")
                        .HasColumnType("int");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_udate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lost_book")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("returning_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("returning_id");

                    b.HasIndex("Usersuser_id");

                    b.HasIndex("borrowing_id");

                    b.ToTable("Returnings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Users", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("access_level")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_of_birth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_udate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.BooksEvaluation", b =>
                {
                    b.HasOne("Books", "Books")
                        .WithMany("booksevaluation")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.models.Evaluation", "Evaluation")
                        .WithMany("BooksEvaluations")
                        .HasForeignKey("evaluation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.BooksUsers", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Usersuser_id");

                    b.HasOne("Books", "Books")
                        .WithMany("BooksUsers")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Borrowings", b =>
                {
                    b.HasOne("Books", "Books")
                        .WithMany("Borrowings")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.models.Users", "Users")
                        .WithMany("Borrowings")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.EvaluationBorrowings", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.Borrowings", "Borrowings")
                        .WithMany()
                        .HasForeignKey("Borrowingsborrowing_id");

                    b.HasOne("LibraryManagementSystem.models.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("evaluation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrowings");

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.EvaluationUsers", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.Users", "Users")
                        .WithMany("EvaluationUsers")
                        .HasForeignKey("Usersuser_id");

                    b.HasOne("LibraryManagementSystem.models.Evaluation", "Evaluation")
                        .WithMany("EvaluationUsers")
                        .HasForeignKey("evaluation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Returnings", b =>
                {
                    b.HasOne("LibraryManagementSystem.models.Users", "Users")
                        .WithMany("Returnings")
                        .HasForeignKey("Usersuser_id");

                    b.HasOne("LibraryManagementSystem.models.Borrowings", "Borrowings")
                        .WithMany("Returnings")
                        .HasForeignKey("borrowing_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Borrowings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Books", b =>
                {
                    b.Navigation("BooksUsers");

                    b.Navigation("Borrowings");

                    b.Navigation("booksevaluation");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Borrowings", b =>
                {
                    b.Navigation("Returnings");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Evaluation", b =>
                {
                    b.Navigation("BooksEvaluations");

                    b.Navigation("EvaluationUsers");
                });

            modelBuilder.Entity("LibraryManagementSystem.models.Users", b =>
                {
                    b.Navigation("Borrowings");

                    b.Navigation("EvaluationUsers");

                    b.Navigation("Returnings");
                });
#pragma warning restore 612, 618
        }
    }
}
